#!/usr/bin/env bash
# usage: bin/compile <build_dir> <cache_dir> <env_dir>

# Don't try to shellcheck cmnlib.sh
# shellcheck disable=SC1091
source "$( cd -P "$( dirname "${0}" )" && pwd )/../cmnlib.sh"

cmn::main::start "${0}" "${1}" "${2}" "${3}"

# -----------------------------------------------------------------------------

# shellcheck disable=SC1091
source "${buildpack_dir}/VERSIONS"
version="${LOGSTASH_VERSION:-"${LOGSTASH_DEFAULT_VERSION}"}"

archive="logstash-${version}.tar.gz"

file_url="https://artifacts.elastic.co/downloads/logstash/logstash-oss-${version}-linux-x86_64.tar.gz"
if [ "${version:0:1}" == "6" ]; then
	file_url="https://artifacts.elastic.co/downloads/logstash/logstash-${version}.tar.gz"
fi

hash_url="${file_url}.sha512"

cache_file="${cache_dir}/${archive}"
hash_file="${cache_file}.sha512"

# -----------------------------------------------------------------------------

cmn::step::start "Installing Logstash ${version}"

# Download hash file:
cmn::task::start "Downloading checksum"
# Remove previous hash files:
rm --recursive --force "${cache_dir}"/*.tar.gz.sha512

if ! cmn::file::download "${hash_url}" "${hash_file}"; then
	cmn::task::fail
	cmn::step::fail
	exit 10
fi
cmn::task::finish

if [ ! -f "${cache_file}" ]; then
	# Remove archive from cache, since they are probably for another version:
	cmn::task::start "Cleaning cache"
	rm --recursive --force "${cache_dir}"/*.tar.gz
	cmn::task::finish

	# Download appropriate version:
	cmn::task::start "Downloading archive"
	if ! cmn::file::download "${file_url}" "${cache_file}"; then
		cmn::task::fail
		cmn::step::fail
		exit 11
	fi
	cmn::task::finish
else
	cmn::output::info "Found matching file in cache."
fi

cmn::task::start "Checking archive validity"
if ! cmn::file::check_checksum "${cache_file}" "${hash_file}"; then
	cmn::task::fail
	cmn::output::err <<- EOM
		Unable to check archive validity.
		I'm now removing the file from the cache to force
		a new download during the next deployment attempt.
	EOM

	# File in cache does not seem valid,
	# remove it so a future run can be successful
	rm --force "${cache_file}"
	rm --force "${hash_file}"
	cmn::step::fail
	exit 12
fi
cmn::task::finish

# From this point we have a valid file in cache.

cmn::task::start "Extracting"
if ! tar --extract --file="${cache_file}" --directory="${build_dir}" \
	2>/dev/null
then
	cmn::task::fail
	cmn::step::fail
	exit 13
fi
cmn::task::finish

cmn::task::start "Configuring"
# Users can provide their own configuration files in the `config` directory.
# But we also want to bring our defaults!
# Simply copying our files in the `config` directory could overwrite the
# user-provided config, and that's not what we want.
# Consequently, user-provided files must first be put aside, so we can copy
# ours.
# The user-provided files are then copied back, which makes sure user-provided
# config takes precedence over our defaults.

# Put user-provided config aside:
if [ -d "${build_dir}/config" ]; then
	if ! mv "${build_dir}/config" "${build_dir}/user_config" 2>/dev/null; then
		cmn::task::fail
		cmn::step::fail
		exit 14
	fi
fi

# Copy default config:
if ! mv "${build_dir}/logstash-${version}/"* "${build_dir}/"; then
	cmn::task::fail
	cmn::step::fail
	exit 15
fi

if ! rmdir "${build_dir}/logstash-${version}"; then
	cmn::task::fail
	cmn::step::fail
	exit 16
fi

# Put user-provided config back in place:
if [ -d "${build_dir}/user_config" ]; then
	if ! mv "${build_dir}/user_config/"* "${build_dir}/config/" 2>/dev/null
	then
		cmn::task::fail
		cmn::step::fail
		exit 17
	fi

	# Don't exit if this one fails:
	rmdir "${build_dir}/user_config" 2>/dev/null
fi
cmn::task::finish

cmn::step::finish

# -----------------------------------------------------------------------------

cmn::step::start "Building Environment"

export PATH="${build_dir}/bin:${PATH}"

cmn::step::finish

# -----------------------------------------------------------------------------

cmn::step::start "Installing Plugins"
# Make sure LOGSTASH_PLUGINS is defined:
LOGSTASH_PLUGINS="${LOGSTASH_PLUGINS:-""}"

# Replace ',' with ' ':
plugins="${LOGSTASH_PLUGINS//,/ }"

# Make sure "logstash-output-opensearch" is installed:
cmn::task::start "Installing plugin logstash-output-opensearch"
if ! logstash-plugin install "logstash-output-opensearch" >/dev/null 2>&1
then
	cmn::task::fail
	cmn::step::fail
	exit 20
fi
cmn::task::finish

# (! Don't quote $plugins)
for plugin in ${plugins}; do
	if [ "${plugin}" != "logstash-output-opensearch" ]; then
		cmn::task::start "Installing plugin ${plugin}"
		if ! logstash-plugin install "${plugin}" >/dev/null 2>&1
		then
			cmn::task::fail
			cmn::step::fail
			exit 21
		fi
		cmn::task::finish
	fi
done

cmn::step::finish

# -----------------------------------------------------------------------------

cmn::step::start "Cleaning up"

cmn::task::start "Removing temporary files"
rm --recursive --force "${tmp_dir}"
cmn::task::finish

cmn::step::finish


cmn::main::finish
